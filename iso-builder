#! /usr/bin/env python

import os,sys
import subprocess
import re
import shutil # for copying files



## Parse and process command line arguments
sys.path.append("lib") # Standalone install

if os.path.exists("/usr/lib/iso-builder/lib"): # from deb pkg
   sys.path.append("/usr/lib/iso-builder/lib")

script_dir=os.path.dirname(os.path.realpath(__file__))+"/"

import parse_args
args_dict=parse_args.ib_parser(script_dir)

#print args_dict
#print "ISO_DIR",args_dict['iso_name']

## Map the key:values of the args_dict into local variables
locals().update(args_dict)



def is_installed(CMD):
    cmd_install='sudo apt-get -y install '
    try: 
        subprocess.check_output('which ' + CMD,shell=True)
        #print 'Command ' + CMD + ' is available'
    except:
        sys.exit('ERROR: command '+ CMD + ' not found. \n Try:\n  ' + cmd_install + CMD)

#is_installed("ls")



## search and replace with regex. Similar to: sed -i 's/orig/final/' file 
def replace_in_file(search_str, replace_str, file_to_edit):
    orig_file = None
    with open(file_to_edit, 'r') as rfile :
        orig_file = rfile.read()
   
    search_str.encode('string-escape')
    replace_str.encode('string-escape')
    orig_file = re.sub(search_str, replace_str, orig_file, flags=re.M)

    with open(file_to_edit, 'w') as wfile:
        wfile.write(orig_file)






## Clear all files created by this script
def clean_all():
    if os.path.exists(tmp_edit_dir + 'isolinux'):
        subprocess.call(['chmod','-R','u+w', tmp_edit_dir]) 
        subprocess.Popen('rm -r ' + tmp_edit_dir ,shell=True).wait()
    if os.path.exists(tmp_mnt_dir + 'isolinux'):
        subprocess.Popen('fusermount -u ' + tmp_mnt_dir ,shell=True).wait()
        subprocess.Popen('rm -r ' + tmp_mnt_dir ,shell=True).wait()
   
## Create the directories to mount and extract the ISO file
def create_dirs():
    if not os.path.exists(tmp_mnt_dir):
        os.makedirs(tmp_mnt_dir)

    if not os.path.exists(iso_dir):
        os.makedirs(iso_dir)
    #subprocess.Popen('mkdir -p ' + tmp_edit_dir ,shell=True).wait()

is_installed('fuseiso')

clean_all()
create_dirs() 






def download_file_as(url,file_path):
    import requests
    ## If no file_path given, assume it is an ISO
    ## and store it in the iso_dir
    if file_path == "":
        file_path = iso_dir + url.split('/')[-1]
    r = requests.get(url, stream=True)
    with open(file_path, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: 
                f.write(chunk)
    return file_path





def ensure_iso_file():
 
    iso_files=[]
    for el in os.listdir(iso_dir):
        if el.endswith(('.iso','.ISO')):
            iso_files.append(el)

    #print "ISO_FILES", iso_files

    #print locals()
    if 'get_os' in globals():
        opsys=get_os.split("-")[0]    
        version=get_os.split("-")[1]
        #version_dir=".".join(version.split(".")[0:2])
   
        for iso_n in iso_files:
            if opsys in iso_n and version in iso_n:
               print "ISO file " + iso_n + " found"
               download=False

        ## Set ISO file name and download URL
        if opsys == "ubuntu":
            iso_name="ubuntu-"+version+"-server-amd64.iso"
            file_url="http://releases.ubuntu.com/" + version + "/" + iso_name
        elif opsys == "debian":
            iso_name="debian-"+ version +"-amd64-netinst.iso"
            #print "DDDEBIAN", version,iso_name
            file_url="http://cdimage.debian.org/debian-cd/"+ version+ \
                     "/amd64/iso-cd/"+ iso_name
            #iso_name="debian-8.5.0-amd.iso"
            #print "#####",iso_name, file_url
        else:
            sys.exit("ERROR: Operative System or version not supported")
 

        if not 'download' in locals():
            print "No ISO file found for "+ opsys + "-" + version +\
                  ". Downloading..."
            iso_name=download_file_as(file_url,"")
 
        return iso_name

tmp=ensure_iso_file()
if tmp:
    iso_name=tmp



def check_integrity():
    ## So far, only for Ubuntu
    if iso_name.split("-")[0] == "ubuntu":
        version = iso_name.split("-")[1]
        version_dir = ".".join(version.split(".")[0:2])
        ## Fetch the cheksums file
        sums_fname="Ubuntu_"+version+"_MD5SUMS"
        sums_path=iso_dir+sums_fname
        if not os.path.exists(sums_path):
            print "Downloading " + sums_fname + " checksums file"
            file_url="http://releases.ubuntu.com/" + version_dir + "/MD5SUMS"
            file_path = iso_dir + "/" + sums_fname
            import urllib
            os_file = urllib.URLopener()
            os_file.retrieve(file_url, file_path)
            

        import hashlib
        def hashfile(afile, hasher, blocksize=65536):
            buf = afile.read(blocksize)
            while len(buf) > 0:
                hasher.update(buf)
                buf = afile.read(blocksize)
            return hasher.hexdigest()

        this_hash = hashfile(open(iso_dir+iso_name, 'rb'), hashlib.md5())

        ## Check that this_hash matches the value in the MD5SUMS file
        for line in open(sums_path,"r"):
            if line.split("*")[1].rstrip() == iso_name:
                table_hash=line.split(" ")[0]
      
        if table_hash == this_hash:
            print "The " + iso_name + " file is OK"
        else:
            sys.exit("ERROR: The " + iso_dir+iso_name + " file is corrupted. "+\
                     "Remove it and run this script again.")

check_integrity()





## Extract the original ISO file into the tmp_edit_dir folder
def extract_iso():
    subprocess.Popen('fuseiso ' + iso_dir + iso_name + ' ' + tmp_mnt_dir, shell=True).wait()
    #copy_tree(tmp_mnt_dir, tmp_edit_dir)
    #shutil.copytree(tmp_mnt_dir, tmp_edit_dir, symlinks=False)
    print "###Copying files"
    if not os.path.exists(tmp_edit_dir):
        os.makedirs(tmp_edit_dir)

    ## Copy the content, not the directory. Otherwise we get a write permission error
    subprocess.Popen('rsync -aq ' + tmp_mnt_dir + '* ' +\
                      tmp_edit_dir, shell=True).wait()
    subprocess.Popen('rsync -aq ' + tmp_mnt_dir + '.disk ' +\
                      tmp_edit_dir, shell=True).wait()
    if 'cp_to_iso' in locals():
        subprocess.Popen('rsync -aq ' + cp_to_iso + ' ' + \
                         tmp_edit_dir, shell=True).wait()
    print "###Copying done!"
    subprocess.call(['chmod','-R','u+w', tmp_edit_dir]) 


is_installed('rsync')
extract_iso()




def customize_kickstart():
    new_template='' # Var to avoid overwriting
    if not os.path.exists(args_dict['loc_kickstart_dir']):
        print 'Directory '+loc_kickstart_dir+' does not exist. Creating...'
        os.makedirs(args_dict['loc_kickstart_dir'])

    ## If use_template does not have a full path, use loc_kickstart_dir 
    if "/" in use_template:
        path_use_template= use_template
    else:
        path_use_template= loc_kickstart_dir + '/'+ use_template
        
    ## Make sure that we have a copy of the ks_template on the templates folder 
    if not os.path.exists(path_use_template):
        print 'The file '+ path_use_template+' does not exist. Copying...'
        shutil.copy2(use_template, path_use_template)

    ## Copy the template file to create our own kickstart 
    #ks_file = loc_kickstart_dir+'/'+template_name
    path_new_template= loc_kickstart_dir+ '/'+ template_name
    if not os.path.exists(path_new_template):
        print 'The file '+ path_new_template+' does not exist. Copying...'
        shutil.copy2(path_use_template, path_new_template)

    ## If the template already exists chose overwrite/rename
    else:
        print 'WARNING: the file ' + path_new_template + ' already exists.'
        print ' Do you want to overwrite it? Y = overwrite, N = rename, ' +\
              'everything else = exit'

        if ans_yes: # ans_yes is the cmd arg for "-y"
            answer="Y"
        else:
            answer=raw_input()

        if answer == "Y":
           shutil.copy2(path_use_template, path_new_template)
        elif answer == "N":
           print "Please provide a new name for the kicstart file:"
           new_name=raw_input()
           path_new_template = loc_kickstart_dir+ '/'+ new_name
           shutil.copy2(path_use_template, path_new_template)
           new_template=str(new_name)
        else:
           sys.exit("Exiting...")

 

    ## Replace all the keys and values of the ks_values_dict on the new ks file 
    for key in ks_values_dict:
        #print key.pattern, ks_values_dict[key], path_template_name
        replace_in_file(key.pattern, ks_values_dict[key], path_new_template)  

    return new_template
   
 
new_template = customize_kickstart()
if new_template != '' and new_template != template_name:
   template_name = new_template



def edit_bootmenu():
    ## If the template name has been given with full path
    if "/" in template_name:
        ks_file=template_name
    else:
        ks_file=loc_kickstart_dir+'/'+template_name

    shutil.copy2(ks_file,tmp_edit_dir)
    file_name=tmp_edit_dir + os.path.split(ks_file)[1]

    ## Change the default timeout for the menu
    cfg_file = args_dict['tmp_edit_dir'] + 'isolinux/isolinux.cfg'
    #subprocess.Popen("sed -i 's/timeout .*/timeout 100/'" + cfg_file ,shell=True)
    replace_in_file('timeout .*', 'timeout 100', cfg_file)

    ## Add the kickstart option as default
    menu_file = args_dict['tmp_edit_dir'] + 'isolinux/txt.cfg'
   
    menu_str=""
    for line in open(menu_file,"r"):
        if line.startswith("default"):
            menu_str+="default ks\n"
        elif line.startswith("label"):
            menu_str+="label ks\n"
        elif "menu label" in line:
            tmp=line.split("label")[0]
            menu_str+= tmp + " label ^KS\n"
        elif "append" in line:
            chunk=line.split("quiet")
            menu_str+=chunk[0]+ "quiet ks=cdrom:/ks.cfg" + chunk[1]
            break
        else:
            menu_str+=line

    replace_in_file('^default .*', menu_str, menu_file)



edit_bootmenu()




def rebuild_iso():
    ## This command looks something like:
    ## mkisofs -D -r -V "BOMSI_INSTALLER" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $OUT_ISO_DIR/$OUT_ISO_NAME $OUT_DIR/
    subprocess.Popen('mkisofs -quiet -D -r -V "BOMSI_INSTALLER" -cache-inodes -J -l ' + 
                      '-b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot ' +
                      '-boot-load-size 4 -boot-info-table '+
                      '-o ' + args_dict['out_iso_dir']+args_dict['out_iso_name'] + ' ' +
                       args_dict['tmp_edit_dir'],
                     shell=True
                     ).wait()

is_installed('genisoimage')
rebuild_iso()
print "###ISO file generated succesfully as: ", out_iso_dir+out_iso_name


def install_vm():
    print "### Installing the " + out_iso_dir+out_iso_name + " ISO file " +\
          "as a KVM Virtual Machine."
    VCPUS=2  #CPUs
    VRAM=4092 #GB
    DISK_SIZE=10 #GB
    out_iso_pre=out_iso_name.split(".iso")[0]
    CMD="virt-install -n " + out_iso_name + " --cpu host --vcpus " +\
         str(VCPUS)  + " -r " +  str(VRAM) + " --os-type=linux --disk /var/lib/libvirt/images/" +\
         out_iso_pre +".qcow2,device=disk,bus=virtio,size=" + str(DISK_SIZE) +\
         ",sparse=true,format=qcow2 --vnc --noautoconsole -c " +\
         out_iso_dir+out_iso_name + " --force"

    subprocess.Popen(CMD,shell=True).wait()
    

if test_vm:
    install_vm()



